// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.3
//   protoc               v5.28.2
// source: src/proto/user-app.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "userms";

/** Enum for user roles */
export enum Role {
  USER = 0,
  MANAGER = 1,
  ADMIN = 2,
  UNRECOGNIZED = -1,
}

export interface HealthCheckRequest {
}

export interface HealthCheckResponse {
  healthy: boolean;
}

/** Message to create a user */
export interface CreateUserRequest {
  name: string;
  email: string;
  password: string;
  roles: Role[];
}

/** Message to update a user */
export interface UpdateUserRequest {
  id: string;
  name: string;
  email: string;
  password: string;
  roles: Role[];
}

/** Message for user ID */
export interface UserIdRequest {
  id: string;
}

/** Response message for a single user */
export interface UserResponse {
  /** ID of the user */
  id: string;
  /** User name */
  name: string;
  /** Email of the user */
  email: string;
  /** string password = 4;       // Password of the user (encrypted/hashed) */
  roles: Role[];
}

/** Response message for multiple users */
export interface UserListResponse {
  users: UserResponse[];
}

/** Empty message */
export interface Empty {
}

export interface DeleteUserRequest {
  id: string;
}

export interface FindUserByIdRequest {
  id: string;
}

/** SignUp request message */
export interface SignUpRequest {
  name: string;
  email: string;
  password: string;
  roles: string[];
}

/** Login request message */
export interface LoginRequest {
  email: string;
  password: string;
}

/** AuthResponse message containing the JWT token */
export interface AuthResponse {
  token: string;
}

export const USERMS_PACKAGE_NAME = "userms";

/** User service with RPC methods */

export interface UserServiceClient {
  /** Create a user */

  createUser(request: CreateUserRequest, metadata?: Metadata): Observable<UserResponse>;

  /** Fetch all users */

  findAllUsers(request: Empty, metadata?: Metadata): Observable<UserListResponse>;

  /** Fetch a user by ID */

  findUserById(request: UserIdRequest, metadata?: Metadata): Observable<UserResponse>;

  /** Update a user */

  updateUser(request: UpdateUserRequest, metadata?: Metadata): Observable<UserResponse>;

  deleteUser(request: UserIdRequest, metadata?: Metadata): Observable<Empty>;

  signUp(request: SignUpRequest, metadata?: Metadata): Observable<AuthResponse>;

  /** Delete a user by ID */

  login(request: LoginRequest, metadata?: Metadata): Observable<AuthResponse>;
}

/** User service with RPC methods */

export interface UserServiceController {
  /** Create a user */

  createUser(
    request: CreateUserRequest,
    metadata?: Metadata,
  ): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  /** Fetch all users */

  findAllUsers(
    request: Empty,
    metadata?: Metadata,
  ): Promise<UserListResponse> | Observable<UserListResponse> | UserListResponse;

  /** Fetch a user by ID */

  findUserById(
    request: UserIdRequest,
    metadata?: Metadata,
  ): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  /** Update a user */

  updateUser(
    request: UpdateUserRequest,
    metadata?: Metadata,
  ): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  deleteUser(request: UserIdRequest, metadata?: Metadata): Promise<Empty> | Observable<Empty> | Empty;

  signUp(request: SignUpRequest, metadata?: Metadata): Promise<AuthResponse> | Observable<AuthResponse> | AuthResponse;

  /** Delete a user by ID */

  login(request: LoginRequest, metadata?: Metadata): Promise<AuthResponse> | Observable<AuthResponse> | AuthResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createUser",
      "findAllUsers",
      "findUserById",
      "updateUser",
      "deleteUser",
      "signUp",
      "login",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";

/** ------------------- MAIN APP SERVICE */

export interface HealthCheckClient {
  check(request: HealthCheckRequest, metadata?: Metadata): Observable<HealthCheckResponse>;
}

/** ------------------- MAIN APP SERVICE */

export interface HealthCheckController {
  check(
    request: HealthCheckRequest,
    metadata?: Metadata,
  ): Promise<HealthCheckResponse> | Observable<HealthCheckResponse> | HealthCheckResponse;
}

export function HealthCheckControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["check"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("HealthCheck", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("HealthCheck", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const HEALTH_CHECK_SERVICE_NAME = "HealthCheck";
